name: Manage Version Tags - Manual

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - delete
      service:
        description: "Service name (e.g. homebrew, jupyterlab, vscode)"
        required: true
        type: string
      version:
        description: "Version (e.g. 1.2.3)"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - development
      delete_mode:
        description: "Delete mode (only for delete action)"
        required: false
        default: "single"
        type: choice
        options:
          - single       # Delete only this version
          - above        # Delete this version and all above
          - above_keep   # Delete all above but keep this version
      confirm_delete:
        description: "Type 'DELETE' to confirm (only for delete action)"
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  manage-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup environment variables
        id: setup
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          VERSION="${{ github.event.inputs.version }}"
          ENV="${{ github.event.inputs.environment }}"
          ACTION="${{ github.event.inputs.action }}"
          
          # Validate version format (X.Y.Z)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version! Use format X.Y.Z (e.g. 1.2.3)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Define suffix based on environment
          if [[ "$ENV" == "development" ]]; then
            TAG_SUFFIX="-next-dev"
            REGISTRY_NAME="aweci-dev"
            ENV_LABEL="🔧 Development"
          else
            TAG_SUFFIX="-next"
            REGISTRY_NAME="aweci"
            ENV_LABEL="🚀 Production"
          fi
          
          FULL_TAG="${SERVICE}-${VERSION}${TAG_SUFFIX}"
          
          echo "action=${ACTION}" >> $GITHUB_OUTPUT
          echo "service=${SERVICE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "tag_suffix=${TAG_SUFFIX}" >> $GITHUB_OUTPUT
          echo "registry_name=${REGISTRY_NAME}" >> $GITHUB_OUTPUT
          echo "env_label=${ENV_LABEL}" >> $GITHUB_OUTPUT
          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT

      # ==================== CREATE SECTION ====================
      - name: Validate service exists (for create)
        if: github.event.inputs.action == 'create'
        run: |
          SERVICE="${{ steps.setup.outputs.service }}"
          
          # Check if service exists
          if [[ ! -d "$SERVICE" ]] || [[ ! -f "$SERVICE/Dockerfile" ]]; then
            echo "❌ Service '$SERVICE' not found or doesn't have a Dockerfile!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Available services:" >> $GITHUB_STEP_SUMMARY
            for dir in */; do
              if [[ -f "${dir}Dockerfile" ]]; then
                echo "- ${dir%/}" >> $GITHUB_STEP_SUMMARY
              fi
            done
            exit 1
          fi

      - name: Validate and prepare tag creation
        if: github.event.inputs.action == 'create'
        id: create_prep
        run: |
          FULL_TAG="${{ steps.setup.outputs.full_tag }}"
          SERVICE="${{ steps.setup.outputs.service }}"
          VERSION="${{ steps.setup.outputs.version }}"
          TAG_SUFFIX="${{ steps.setup.outputs.tag_suffix }}"
          
          # Check if tag already exists
          if git rev-parse "$FULL_TAG" >/dev/null 2>&1; then
            echo "❌ Tag '$FULL_TAG' already exists!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Existing tags for ${SERVICE}:" >> $GITHUB_STEP_SUMMARY
            git tag -l "${SERVICE}-*${TAG_SUFFIX}" --sort=-version:refname | head -10 | while read tag; do
              echo "- $tag" >> $GITHUB_STEP_SUMMARY
            done
            exit 1
          fi
          
          # Get latest tag for comparison
          LATEST_TAG=$(git tag -l "${SERVICE}-*${TAG_SUFFIX}" --sort=-version:refname | head -n 1)
          
          if [[ -n "$LATEST_TAG" ]]; then
            LATEST_VERSION=$(echo $LATEST_TAG | sed "s/${SERVICE}-//" | sed 's/-next.*//')
            echo "📊 Latest version: $LATEST_VERSION"
            
            # Compare versions
            IFS='.' read -ra NEW <<< "$VERSION"
            IFS='.' read -ra OLD <<< "$LATEST_VERSION"
            
            NEW_MAJOR=${NEW[0]}
            NEW_MINOR=${NEW[1]}
            NEW_PATCH=${NEW[2]}
            OLD_MAJOR=${OLD[0]}
            OLD_MINOR=${OLD[1]}
            OLD_PATCH=${OLD[2]}
            
            # Determine change type
            if [[ $NEW_MAJOR -gt $OLD_MAJOR ]]; then
              CHANGE_TYPE="MAJOR"
              EMOJI="🚨"
            elif [[ $NEW_MINOR -gt $OLD_MINOR ]]; then
              CHANGE_TYPE="MINOR"
              EMOJI="✨"
            elif [[ $NEW_PATCH -gt $OLD_PATCH ]]; then
              CHANGE_TYPE="PATCH"
              EMOJI="🐛"
            else
              CHANGE_TYPE="CUSTOM"
              EMOJI="⚠️"
            fi
          else
            LATEST_VERSION="N/A (first version)"
            CHANGE_TYPE="INITIAL"
            EMOJI="🎉"
          fi
          
          echo "change_type=${CHANGE_TYPE}" >> $GITHUB_OUTPUT
          echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: github.event.inputs.action == 'create'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag with message
          git tag -a "${{ steps.setup.outputs.full_tag }}" \
            -m "${{ steps.create_prep.outputs.emoji }} ${{ steps.create_prep.outputs.change_type }}: ${{ steps.setup.outputs.service }} v${{ steps.setup.outputs.version }}" \
            -m "" \
            -m "Type: ${{ steps.setup.outputs.env_label }}" \
            -m "Created manually by: ${{ github.actor }}" \
            -m "Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Push tag
          git push origin "${{ steps.setup.outputs.full_tag }}"
          
          echo "✅ Tag created successfully!"

      - name: Generate create summary
        if: github.event.inputs.action == 'create'
        run: |
          echo "# ${{ steps.create_prep.outputs.emoji }} Tag Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Service** | \`${{ steps.setup.outputs.service }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ steps.setup.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ steps.setup.outputs.env_label }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Full Tag** | \`${{ steps.setup.outputs.full_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Type** | ${{ steps.create_prep.outputs.change_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Previous Version** | \`${{ steps.create_prep.outputs.latest_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Created by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tag has been created! Now you can:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run the normal **Build & Deploy** workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Select service \`${{ steps.setup.outputs.service }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.setup.outputs.environment }}" == "development" ]]; then
            echo "3. Choose option \`${{ steps.setup.outputs.service }}-dev\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "3. Choose option \`${{ steps.setup.outputs.service }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Recent Tags for ${{ steps.setup.outputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "${{ steps.setup.outputs.service }}-*${{ steps.setup.outputs.tag_suffix }}" | sort -V | tail -5 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # ==================== DELETE SECTION ====================
      - name: Validate delete confirmation
        if: github.event.inputs.action == 'delete'
        run: |
          if [[ "${{ github.event.inputs.confirm_delete }}" != "DELETE" ]]; then
            echo "❌ Confirmation failed! You must type 'DELETE' to proceed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ This is a safety measure to prevent accidental deletions." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To proceed with deletion, please:" >> $GITHUB_STEP_SUMMARY
            echo "1. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
            echo "2. Type exactly 'DELETE' in the confirmation field (case-sensitive)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Prepare deletion list
        if: github.event.inputs.action == 'delete'
        id: delete_prep
        run: |
          SERVICE="${{ steps.setup.outputs.service }}"
          VERSION="${{ steps.setup.outputs.version }}"
          TAG_SUFFIX="${{ steps.setup.outputs.tag_suffix }}"
          MODE="${{ github.event.inputs.delete_mode }}"
          
          # Get all tags for this service and environment
          ALL_TAGS=$(git tag -l "${SERVICE}-*${TAG_SUFFIX}" | grep -E "${SERVICE}-[0-9]+\.[0-9]+\.[0-9]+${TAG_SUFFIX}$" | sort -V)
          
          if [[ -z "$ALL_TAGS" ]]; then
            echo "❌ No tags found for ${SERVICE} in ${{ steps.setup.outputs.env_label }} environment!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Find tags to delete based on mode
          TARGET_TAG="${{ steps.setup.outputs.full_tag }}"
          TAGS_TO_DELETE=""
          
          case "$MODE" in
            single)
              if echo "$ALL_TAGS" | grep -q "^${TARGET_TAG}$"; then
                TAGS_TO_DELETE="$TARGET_TAG"
              else
                echo "❌ Tag ${TARGET_TAG} not found!" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "Available tags:" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "$ALL_TAGS" | tail -10 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              ;;
            above)
              # Delete target version and all above
              FOUND=false
              for tag in $ALL_TAGS; do
                if [[ "$tag" == "$TARGET_TAG" ]]; then
                  FOUND=true
                fi
                if [[ "$FOUND" == true ]]; then
                  TAGS_TO_DELETE="${TAGS_TO_DELETE}${tag}\n"
                fi
              done
              if [[ "$FOUND" == false ]]; then
                echo "❌ Tag ${TARGET_TAG} not found!" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              ;;
            above_keep)
              # Delete all above but keep target version
              FOUND=false
              COLLECTING=false
              for tag in $ALL_TAGS; do
                if [[ "$tag" == "$TARGET_TAG" ]]; then
                  FOUND=true
                  COLLECTING=true
                elif [[ "$COLLECTING" == true ]]; then
                  TAGS_TO_DELETE="${TAGS_TO_DELETE}${tag}\n"
                fi
              done
              if [[ "$FOUND" == false ]]; then
                echo "❌ Tag ${TARGET_TAG} not found!" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              if [[ -z "$TAGS_TO_DELETE" ]]; then
                echo "⚠️ No tags found above ${TARGET_TAG}" >> $GITHUB_STEP_SUMMARY
                echo "Nothing to delete." >> $GITHUB_STEP_SUMMARY
                exit 0
              fi
              ;;
          esac
          
          # Remove trailing newline and save to file
          echo -e "$TAGS_TO_DELETE" | grep -v '^$' > tags_to_delete.txt
          
          # Count tags
          TAG_COUNT=$(cat tags_to_delete.txt | wc -l)
          
          echo "tag_count=${TAG_COUNT}" >> $GITHUB_OUTPUT
          
          # Display what will be deleted
          echo "## 🗑️ Deletion Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.setup.outputs.env_label }}" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${SERVICE}" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${MODE}" >> $GITHUB_STEP_SUMMARY
          echo "**Total to delete:** ${TAG_COUNT} version(s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags to be deleted:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat tags_to_delete.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Delete Git tags
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Deleting Git Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          DELETED_TAGS=""
          FAILED_TAGS=""
          
          while IFS= read -r tag; do
            echo "Deleting Git tag: $tag"
            if git push origin --delete "$tag" 2>/dev/null; then
              DELETED_TAGS="${DELETED_TAGS}- ✅ ${tag}\n"
              # Also delete locally
              git tag -d "$tag" 2>/dev/null || true
            else
              FAILED_TAGS="${FAILED_TAGS}- ❌ ${tag} (may not exist)\n"
            fi
          done < tags_to_delete.txt
          
          if [[ -n "$DELETED_TAGS" ]]; then
            echo "### Successfully deleted tags:" >> $GITHUB_STEP_SUMMARY
            echo -e "$DELETED_TAGS" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "$FAILED_TAGS" ]]; then
            echo "### Failed to delete tags:" >> $GITHUB_STEP_SUMMARY
            echo -e "$FAILED_TAGS" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Login to GitHub Container Registry
        if: github.event.inputs.action == 'delete'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Docker images from GHCR
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Deleting Docker Images from GHCR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          REGISTRY="ghcr.io/${{ github.repository_owner }}/${{ steps.setup.outputs.registry_name }}"
          SERVICE="${{ steps.setup.outputs.service }}"
          
          DELETED_IMAGES=""
          FAILED_IMAGES=""
          
          while IFS= read -r tag; do
            # Extract version from tag (remove service prefix and suffix)
            VERSION=$(echo "$tag" | sed "s/${SERVICE}-//" | sed 's/-next.*//')
            IMAGE_TAG="${SERVICE}-${VERSION}"
            FULL_IMAGE="${REGISTRY}:${IMAGE_TAG}"
            
            echo "Attempting to delete: $FULL_IMAGE"
            
            # Get package version ID using GitHub API
            PACKAGE_VERSION_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/user/packages/container/${{ steps.setup.outputs.registry_name }}/versions" \
              | jq -r ".[] | select(.metadata.container.tags[] | contains(\"${IMAGE_TAG}\")) | .id" | head -1)
            
            if [[ -n "$PACKAGE_VERSION_ID" ]] && [[ "$PACKAGE_VERSION_ID" != "null" ]]; then
              # Delete the package version
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/user/packages/container/${{ steps.setup.outputs.registry_name }}/versions/${PACKAGE_VERSION_ID}")
              
              if [[ "$DELETE_RESPONSE" == "204" ]]; then
                DELETED_IMAGES="${DELETED_IMAGES}- ✅ ${FULL_IMAGE}\n"
                echo "  ✅ Deleted successfully"
              else
                FAILED_IMAGES="${FAILED_IMAGES}- ❌ ${FULL_IMAGE} (HTTP ${DELETE_RESPONSE})\n"
                echo "  ❌ Failed to delete (HTTP ${DELETE_RESPONSE})"
              fi
            else
              FAILED_IMAGES="${FAILED_IMAGES}- ⚠️ ${FULL_IMAGE} (not found)\n"
              echo "  ⚠️ Image not found in registry"
            fi
            
            # Small delay to avoid rate limiting
            sleep 1
          done < tags_to_delete.txt
          
          if [[ -n "$DELETED_IMAGES" ]]; then
            echo "### Successfully deleted images:" >> $GITHUB_STEP_SUMMARY
            echo -e "$DELETED_IMAGES" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "$FAILED_IMAGES" ]]; then
            echo "### Failed to delete images:" >> $GITHUB_STEP_SUMMARY
            echo -e "$FAILED_IMAGES" >> $GITHUB_STEP_SUMMARY
          fi

      - name: List remaining versions (delete action)
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Remaining Versions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SERVICE="${{ steps.setup.outputs.service }}"
          TAG_SUFFIX="${{ steps.setup.outputs.tag_suffix }}"
          
          echo "### Git Tags for ${SERVICE} (${{ steps.setup.outputs.env_label }}):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "${SERVICE}-*${TAG_SUFFIX}" | grep -E "${SERVICE}-[0-9]+\.[0-9]+\.[0-9]+${TAG_SUFFIX}$" | sort -V | tail -10 >> $GITHUB_STEP_SUMMARY || echo "No tags remaining" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images in GHCR:" >> $GITHUB_STEP_SUMMARY
          echo "Check at: https://github.com/${{ github.repository }}/pkgs/container/${{ steps.setup.outputs.registry_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Final summary (delete action)
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Deletion Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Service** | ${{ steps.setup.outputs.service }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ steps.setup.outputs.env_label }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Versions Deleted** | ${{ steps.delete_prep.outputs.tag_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Executed by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow Run** | [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY