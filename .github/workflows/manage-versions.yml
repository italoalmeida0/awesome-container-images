name: Manage Version Tags - Manual

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - delete
      service:
        description: "Service name (e.g. homebrew, jupyterlab, vscode)"
        required: true
        type: string
      version:
        description: "Version (e.g. 1.2.3)"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - development
      delete_mode:
        description: "Delete mode (only for delete action)"
        required: false
        default: "single"
        type: choice
        options:
          - single # Delete this version (+next if exists) and recreate this version
          - above # Delete this version and all above, recreate this version
          - above_keep # Delete all above, keep this, create next version
      confirm_delete:
        description: "Type 'DELETE' to confirm (only for delete action)"
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  manage-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup environment variables
        id: setup
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          VERSION="${{ github.event.inputs.version }}"
          ENV="${{ github.event.inputs.environment }}"
          ACTION="${{ github.event.inputs.action }}"

          # Validate version format (X.Y.Z)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version! Use format X.Y.Z (e.g. 1.2.3)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Calculate next version (for single delete mode)
          IFS='.' read -ra VER_PARTS <<< "$VERSION"
          NEXT_PATCH=$((VER_PARTS[2] + 1))
          NEXT_VERSION="${VER_PARTS[0]}.${VER_PARTS[1]}.${NEXT_PATCH}"

          # Define suffix based on environment
          if [[ "$ENV" == "development" ]]; then
            TAG_SUFFIX="-next-dev"
            REGISTRY_NAME="aweci-dev"
            ENV_LABEL="üîß Development"
          else
            TAG_SUFFIX="-next"
            REGISTRY_NAME="aweci"
            ENV_LABEL="üöÄ Production"
          fi

          FULL_TAG="${SERVICE}-${VERSION}${TAG_SUFFIX}"
          NEXT_TAG="${SERVICE}-${NEXT_VERSION}${TAG_SUFFIX}"

          echo "action=${ACTION}" >> $GITHUB_OUTPUT
          echo "service=${SERVICE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "tag_suffix=${TAG_SUFFIX}" >> $GITHUB_OUTPUT
          echo "registry_name=${REGISTRY_NAME}" >> $GITHUB_OUTPUT
          echo "env_label=${ENV_LABEL}" >> $GITHUB_OUTPUT
          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT
          echo "next_tag=${NEXT_TAG}" >> $GITHUB_OUTPUT

      # ==================== CREATE SECTION ====================
      - name: Validate service exists (for create)
        if: github.event.inputs.action == 'create'
        run: |
          SERVICE="${{ steps.setup.outputs.service }}"

          # Check if service exists
          if [[ ! -d "$SERVICE" ]] || [[ ! -f "$SERVICE/Dockerfile" ]]; then
            echo "‚ùå Service '$SERVICE' not found or doesn't have a Dockerfile!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Available services:" >> $GITHUB_STEP_SUMMARY
            for dir in */; do
              if [[ -f "${dir}Dockerfile" ]]; then
                echo "- ${dir%/}" >> $GITHUB_STEP_SUMMARY
              fi
            done
            exit 1
          fi

      - name: Validate and prepare tag creation
        if: github.event.inputs.action == 'create'
        id: create_prep
        run: |
          FULL_TAG="${{ steps.setup.outputs.full_tag }}"
          SERVICE="${{ steps.setup.outputs.service }}"
          VERSION="${{ steps.setup.outputs.version }}"
          TAG_SUFFIX="${{ steps.setup.outputs.tag_suffix }}"

          # Check if tag already exists
          if git rev-parse "$FULL_TAG" >/dev/null 2>&1; then
            echo "‚ùå Tag '$FULL_TAG' already exists!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Existing tags for ${SERVICE}:" >> $GITHUB_STEP_SUMMARY
            git tag -l "${SERVICE}-*${TAG_SUFFIX}" --sort=-version:refname | head -10 | while read tag; do
              echo "- $tag" >> $GITHUB_STEP_SUMMARY
            done
            exit 1
          fi

          # Get latest tag for comparison
          LATEST_TAG=$(git tag -l "${SERVICE}-*${TAG_SUFFIX}" --sort=-version:refname | head -n 1)

          if [[ -n "$LATEST_TAG" ]]; then
            LATEST_VERSION=$(echo $LATEST_TAG | sed "s/${SERVICE}-//" | sed 's/-next.*//')
            echo "üìä Latest version: $LATEST_VERSION"
            
            # Compare versions
            IFS='.' read -ra NEW <<< "$VERSION"
            IFS='.' read -ra OLD <<< "$LATEST_VERSION"
            
            NEW_MAJOR=${NEW[0]}
            NEW_MINOR=${NEW[1]}
            NEW_PATCH=${NEW[2]}
            OLD_MAJOR=${OLD[0]}
            OLD_MINOR=${OLD[1]}
            OLD_PATCH=${OLD[2]}
            
            # Determine change type
            if [[ $NEW_MAJOR -gt $OLD_MAJOR ]]; then
              CHANGE_TYPE="MAJOR"
              EMOJI="üö®"
            elif [[ $NEW_MINOR -gt $OLD_MINOR ]]; then
              CHANGE_TYPE="MINOR"
              EMOJI="‚ú®"
            elif [[ $NEW_PATCH -gt $OLD_PATCH ]]; then
              CHANGE_TYPE="PATCH"
              EMOJI="üêõ"
            else
              CHANGE_TYPE="CUSTOM"
              EMOJI="‚ö†Ô∏è"
            fi
          else
            LATEST_VERSION="N/A (first version)"
            CHANGE_TYPE="INITIAL"
            EMOJI="üéâ"
          fi

          echo "change_type=${CHANGE_TYPE}" >> $GITHUB_OUTPUT
          echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: github.event.inputs.action == 'create'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag with message
          git tag -a "${{ steps.setup.outputs.full_tag }}" \
            -m "${{ steps.create_prep.outputs.emoji }} ${{ steps.create_prep.outputs.change_type }}: ${{ steps.setup.outputs.service }} v${{ steps.setup.outputs.version }}" \
            -m "" \
            -m "Type: ${{ steps.setup.outputs.env_label }}" \
            -m "Created manually by: ${{ github.actor }}" \
            -m "Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Push tag
          git push origin "${{ steps.setup.outputs.full_tag }}"

          echo "‚úÖ Tag created successfully!"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Tag Created!" >> $GITHUB_STEP_SUMMARY
          echo "Created tag: \`${{ steps.setup.outputs.full_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Next build will:" >> $GITHUB_STEP_SUMMARY
          echo "1. Build version **${{ steps.setup.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "2. Auto-create next tag **${{ steps.setup.outputs.next_version }}**" >> $GITHUB_STEP_SUMMARY

      # ==================== DELETE SECTION ====================
      - name: Validate delete confirmation
        if: github.event.inputs.action == 'delete'
        run: |
          if [[ "${{ github.event.inputs.confirm_delete }}" != "DELETE" ]]; then
            echo "‚ùå Confirmation failed! You must type 'DELETE' to proceed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è This is a safety measure to prevent accidental deletions." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Prepare deletion and recreation plan
        if: github.event.inputs.action == 'delete'
        id: delete_prep
        run: |
          SERVICE="${{ steps.setup.outputs.service }}"
          VERSION="${{ steps.setup.outputs.version }}"
          NEXT_VERSION="${{ steps.setup.outputs.next_version }}"
          TAG_SUFFIX="${{ steps.setup.outputs.tag_suffix }}"
          MODE="${{ github.event.inputs.delete_mode }}"
          TARGET_TAG="${{ steps.setup.outputs.full_tag }}"
          NEXT_TAG="${{ steps.setup.outputs.next_tag }}"

          # Get all tags for this service and environment
          ALL_TAGS=$(git tag -l "${SERVICE}-*${TAG_SUFFIX}" | grep -E "${SERVICE}-[0-9]+\.[0-9]+\.[0-9]+${TAG_SUFFIX}$" | sort -V)

          if [[ -z "$ALL_TAGS" ]]; then
            echo "‚ùå No tags found for ${SERVICE} in ${{ steps.setup.outputs.env_label }} environment!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Initialize variables
          TAGS_TO_DELETE=""
          TAG_TO_CREATE=""

          case "$MODE" in
            single)
              # Delete target version
              if echo "$ALL_TAGS" | grep -q "^${TARGET_TAG}$"; then
                TAGS_TO_DELETE="${TARGET_TAG}\n"
              else
                echo "‚ùå Tag ${TARGET_TAG} not found!" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              
              # Also delete next version if it exists (the auto-created one)
              if echo "$ALL_TAGS" | grep -q "^${NEXT_TAG}$"; then
                TAGS_TO_DELETE="${TAGS_TO_DELETE}${NEXT_TAG}\n"
                echo "‚ÑπÔ∏è Found auto-created next tag ${NEXT_TAG}, will delete it too" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Will recreate the target version for next build
              TAG_TO_CREATE="${TARGET_TAG}"
              ;;
              
            above)
              # Delete target version and all above
              FOUND=false
              for tag in $ALL_TAGS; do
                if [[ "$tag" == "$TARGET_TAG" ]]; then
                  FOUND=true
                fi
                if [[ "$FOUND" == true ]]; then
                  TAGS_TO_DELETE="${TAGS_TO_DELETE}${tag}\n"
                fi
              done
              if [[ "$FOUND" == false ]]; then
                echo "‚ùå Tag ${TARGET_TAG} not found!" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              
              # Will recreate the target version for next build
              TAG_TO_CREATE="${TARGET_TAG}"
              ;;
              
            above_keep)
              # Delete all above but keep target version
              FOUND=false
              COLLECTING=false
              for tag in $ALL_TAGS; do
                if [[ "$tag" == "$TARGET_TAG" ]]; then
                  FOUND=true
                  COLLECTING=true
                elif [[ "$COLLECTING" == true ]]; then
                  TAGS_TO_DELETE="${TAGS_TO_DELETE}${tag}\n"
                fi
              done
              if [[ "$FOUND" == false ]]; then
                echo "‚ùå Tag ${TARGET_TAG} not found!" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              if [[ -z "$TAGS_TO_DELETE" ]]; then
                echo "‚ö†Ô∏è No tags found above ${TARGET_TAG}" >> $GITHUB_STEP_SUMMARY
                echo "Nothing to delete." >> $GITHUB_STEP_SUMMARY
                exit 0
              fi
              
              # Will create the NEXT version for next build (since we're keeping current)
              TAG_TO_CREATE="${NEXT_TAG}"
              ;;
          esac

          # Save tags to delete
          echo -e "$TAGS_TO_DELETE" | grep -v '^$' > tags_to_delete.txt

          # Count tags
          TAG_COUNT=$(cat tags_to_delete.txt | wc -l)

          # Extract version from tag to create
          VERSION_TO_CREATE=$(echo "$TAG_TO_CREATE" | sed "s/${SERVICE}-//" | sed 's/-next.*//')

          echo "tag_count=${TAG_COUNT}" >> $GITHUB_OUTPUT
          echo "tag_to_create=${TAG_TO_CREATE}" >> $GITHUB_OUTPUT
          echo "version_to_create=${VERSION_TO_CREATE}" >> $GITHUB_OUTPUT

          # Display the plan
          echo "## üéØ Execution Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 1Ô∏è‚É£ Delete Phase" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${MODE}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags to delete (${TAG_COUNT}):**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat tags_to_delete.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 2Ô∏è‚É£ Recreation Phase" >> $GITHUB_STEP_SUMMARY
          echo "**Tag to create:** \`${TAG_TO_CREATE}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${VERSION_TO_CREATE}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 3Ô∏è‚É£ Next Build Behavior" >> $GITHUB_STEP_SUMMARY
          if [[ "$MODE" == "above_keep" ]]; then
            echo "- Will build version **${VERSION_TO_CREATE}**" >> $GITHUB_STEP_SUMMARY
            echo "- Will auto-create next tag after ${VERSION_TO_CREATE}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Will build version **${VERSION_TO_CREATE}**" >> $GITHUB_STEP_SUMMARY
            echo "- Will auto-create tag **${NEXT_VERSION}**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Delete Git tags
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìù Phase 1: Deleting Git Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          DELETED_TAGS=""
          FAILED_TAGS=""

          while IFS= read -r tag; do
            echo "Deleting Git tag: $tag"
            if git push origin --delete "$tag" 2>/dev/null; then
              DELETED_TAGS="${DELETED_TAGS}- ‚úÖ ${tag}\n"
              git tag -d "$tag" 2>/dev/null || true
            else
              FAILED_TAGS="${FAILED_TAGS}- ‚ùå ${tag} (may not exist)\n"
            fi
          done < tags_to_delete.txt

          if [[ -n "$DELETED_TAGS" ]]; then
            echo "### Successfully deleted tags:" >> $GITHUB_STEP_SUMMARY
            echo -e "$DELETED_TAGS" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ -n "$FAILED_TAGS" ]]; then
            echo "### Failed to delete tags:" >> $GITHUB_STEP_SUMMARY
            echo -e "$FAILED_TAGS" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Login to GitHub Container Registry
        if: github.event.inputs.action == 'delete'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Docker images from GHCR
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üê≥ Phase 2: Deleting Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          REGISTRY="ghcr.io/${{ github.repository_owner }}/${{ steps.setup.outputs.registry_name }}"
          SERVICE="${{ steps.setup.outputs.service }}"

          DELETED_IMAGES=""
          FAILED_IMAGES=""

          while IFS= read -r tag; do
            VERSION=$(echo "$tag" | sed "s/${SERVICE}-//" | sed 's/-next.*//')
            IMAGE_TAG="${SERVICE}-${VERSION}"
            FULL_IMAGE="${REGISTRY}:${IMAGE_TAG}"
            
            echo "Attempting to delete: $FULL_IMAGE"
            
            PACKAGE_VERSION_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/user/packages/container/${{ steps.setup.outputs.registry_name }}/versions" \
              | jq -r ".[] | select(.metadata.container.tags[] | contains(\"${IMAGE_TAG}\")) | .id" | head -1)
            
            if [[ -n "$PACKAGE_VERSION_ID" ]] && [[ "$PACKAGE_VERSION_ID" != "null" ]]; then
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/user/packages/container/${{ steps.setup.outputs.registry_name }}/versions/${PACKAGE_VERSION_ID}")
              
              if [[ "$DELETE_RESPONSE" == "204" ]]; then
                DELETED_IMAGES="${DELETED_IMAGES}- ‚úÖ ${FULL_IMAGE}\n"
                echo "  ‚úÖ Deleted successfully"
              else
                FAILED_IMAGES="${FAILED_IMAGES}- ‚ùå ${FULL_IMAGE} (HTTP ${DELETE_RESPONSE})\n"
                echo "  ‚ùå Failed to delete (HTTP ${DELETE_RESPONSE})"
              fi
            else
              FAILED_IMAGES="${FAILED_IMAGES}- ‚ö†Ô∏è ${FULL_IMAGE} (not found)\n"
              echo "  ‚ö†Ô∏è Image not found in registry"
            fi
            
            sleep 1
          done < tags_to_delete.txt

          if [[ -n "$DELETED_IMAGES" ]]; then
            echo "### Successfully deleted images:" >> $GITHUB_STEP_SUMMARY
            echo -e "$DELETED_IMAGES" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ -n "$FAILED_IMAGES" ]]; then
            echo "### Failed to delete images:" >> $GITHUB_STEP_SUMMARY
            echo -e "$FAILED_IMAGES" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Recreate tag for next build
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîÑ Phase 3: Recreating Tag for Next Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          TAG_TO_CREATE="${{ steps.delete_prep.outputs.tag_to_create }}"
          VERSION_TO_CREATE="${{ steps.delete_prep.outputs.version_to_create }}"
          MODE="${{ github.event.inputs.delete_mode }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Determine the message based on mode
          if [[ "$MODE" == "above_keep" ]]; then
            MESSAGE="üîÑ NEXT: Ready for build after keeping v${VERSION}"
            DESCRIPTION="Next version after rollback"
          else
            MESSAGE="üîÑ ROLLBACK: Ready to rebuild v${VERSION_TO_CREATE}"
            DESCRIPTION="Recreated after deletion for rebuild"
          fi

          # Create annotated tag
          git tag -a "${TAG_TO_CREATE}" \
            -m "${MESSAGE}" \
            -m "" \
            -m "Type: ${{ steps.setup.outputs.env_label }}" \
            -m "Action: ${DESCRIPTION}" \
            -m "Recreated by: ${{ github.actor }}" \
            -m "Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Push tag
          git push origin "${TAG_TO_CREATE}"

          echo "‚úÖ **Tag recreated:** \`${TAG_TO_CREATE}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Ready for Next Build!" >> $GITHUB_STEP_SUMMARY
          echo "The build workflow will now:" >> $GITHUB_STEP_SUMMARY
          echo "1. Find tag \`${TAG_TO_CREATE}\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Build version **${VERSION_TO_CREATE}**" >> $GITHUB_STEP_SUMMARY
          echo "3. Auto-create the next incremented tag" >> $GITHUB_STEP_SUMMARY

      - name: List final state
        if: github.event.inputs.action == 'delete'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Final State" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          SERVICE="${{ steps.setup.outputs.service }}"
          TAG_SUFFIX="${{ steps.setup.outputs.tag_suffix }}"

          echo "### Current Git Tags (last 10):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "${SERVICE}-*${TAG_SUFFIX}" | grep -E "${SERVICE}-[0-9]+\.[0-9]+\.[0-9]+${TAG_SUFFIX}$" | sort -V | tail -10 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary:" >> $GITHUB_STEP_SUMMARY
          echo "| Action | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deleted tags | ‚úÖ ${{ steps.delete_prep.outputs.tag_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deleted images | ‚úÖ Processed |" >> $GITHUB_STEP_SUMMARY
          echo "| Recreated tag | ‚úÖ \`${{ steps.delete_prep.outputs.tag_to_create }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Ready for build | ‚úÖ Yes |" >> $GITHUB_STEP_SUMMARY
