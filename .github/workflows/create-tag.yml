name: Create Version Tag - Manual

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Service name (e.g. homebrew, jupyterlab, vscode)"
        required: true
        type: string
      version:
        description: "Version to create (e.g. 1.2.3)"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - development

permissions:
  contents: write

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate inputs and create tag
        id: create_tag
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          VERSION="${{ github.event.inputs.version }}"
          ENV="${{ github.event.inputs.environment }}"

          # Validate version format (X.Y.Z)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version! Use format X.Y.Z (e.g. 1.2.3)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check if service exists
          if [[ ! -d "$SERVICE" ]] || [[ ! -f "$SERVICE/Dockerfile" ]]; then
            echo "❌ Service '$SERVICE' not found or doesn't have a Dockerfile!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Available services:" >> $GITHUB_STEP_SUMMARY
            for dir in */; do
              if [[ -f "${dir}Dockerfile" ]]; then
                echo "- ${dir%/}" >> $GITHUB_STEP_SUMMARY
              fi
            done
            exit 1
          fi

          # Define suffix based on environment
          if [[ "$ENV" == "development" ]]; then
            TAG_SUFFIX="-next-dev"
            TAG_TYPE="🔧 Development"
          else
            TAG_SUFFIX="-next"
            TAG_TYPE="🚀 Production"
          fi

          # Create full tag name
          FULL_TAG="${SERVICE}-${VERSION}${TAG_SUFFIX}"

          # Check if tag already exists
          if git rev-parse "$FULL_TAG" >/dev/null 2>&1; then
            echo "❌ Tag '$FULL_TAG' already exists!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Existing tags for ${SERVICE}:" >> $GITHUB_STEP_SUMMARY
            git tag -l "${SERVICE}-*${TAG_SUFFIX}" --sort=-version:refname | head -10 | while read tag; do
              echo "- $tag" >> $GITHUB_STEP_SUMMARY
            done
            exit 1
          fi

          # Get latest tag for comparison
          LATEST_TAG=$(git tag -l "${SERVICE}-*${TAG_SUFFIX}" --sort=-version:refname | head -n 1)

          if [[ -n "$LATEST_TAG" ]]; then
            LATEST_VERSION=$(echo $LATEST_TAG | sed "s/${SERVICE}-//" | sed 's/-next.*//')
            echo "📊 Latest version: $LATEST_VERSION"
            
            # Compare versions
            IFS='.' read -ra NEW <<< "$VERSION"
            IFS='.' read -ra OLD <<< "$LATEST_VERSION"
            
            NEW_MAJOR=${NEW[0]}
            NEW_MINOR=${NEW[1]}
            NEW_PATCH=${NEW[2]}
            OLD_MAJOR=${OLD[0]}
            OLD_MINOR=${OLD[1]}
            OLD_PATCH=${OLD[2]}
            
            # Determine change type
            if [[ $NEW_MAJOR -gt $OLD_MAJOR ]]; then
              CHANGE_TYPE="MAJOR"
              EMOJI="🚨"
            elif [[ $NEW_MINOR -gt $OLD_MINOR ]]; then
              CHANGE_TYPE="MINOR"
              EMOJI="✨"
            elif [[ $NEW_PATCH -gt $OLD_PATCH ]]; then
              CHANGE_TYPE="PATCH"
              EMOJI="🐛"
            else
              CHANGE_TYPE="CUSTOM"
              EMOJI="⚠️"
            fi
          else
            LATEST_VERSION="N/A (first version)"
            CHANGE_TYPE="INITIAL"
            EMOJI="🎉"
          fi

          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT
          echo "tag_type=${TAG_TYPE}" >> $GITHUB_OUTPUT
          echo "change_type=${CHANGE_TYPE}" >> $GITHUB_OUTPUT
          echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag with message
          git tag -a "${{ steps.create_tag.outputs.full_tag }}" \
            -m "${{ steps.create_tag.outputs.emoji }} ${{ steps.create_tag.outputs.change_type }}: ${{ github.event.inputs.service }} v${{ github.event.inputs.version }}" \
            -m "" \
            -m "Type: ${{ steps.create_tag.outputs.tag_type }}" \
            -m "Created manually by: ${{ github.actor }}" \
            -m "Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Push tag
          git push origin "${{ steps.create_tag.outputs.full_tag }}"

          echo "✅ Tag created successfully!"

      - name: Generate Summary
        run: |
          echo "# ${{ steps.create_tag.outputs.emoji }} Tag Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Service** | \`${{ github.event.inputs.service }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ github.event.inputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ steps.create_tag.outputs.tag_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Full Tag** | \`${{ steps.create_tag.outputs.full_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Type** | ${{ steps.create_tag.outputs.change_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Previous Version** | \`${{ steps.create_tag.outputs.latest_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Created by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tag has been created! Now you can:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run the normal **Build & Deploy** workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Select service \`${{ github.event.inputs.service }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.environment }}" == "development" ]]; then
            echo "3. Choose option \`${{ github.event.inputs.service }}-dev\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "3. Choose option \`${{ github.event.inputs.service }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The build will detect version \`${{ github.event.inputs.version }}\` and create the next one automatically." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Git Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To verify locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "git fetch --tags" >> $GITHUB_STEP_SUMMARY
          echo "git tag -l '${{ github.event.inputs.service }}-*' --sort=-version:refname | head -5" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: List recent tags for this service
        run: |
          echo "## 📊 Recent Tags for ${{ github.event.inputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production (-next):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "${{ github.event.inputs.service }}-*-next" | grep -v "\-dev" | sort -V | tail -5 >> $GITHUB_STEP_SUMMARY || echo "No production tags found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Development (-next-dev):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git tag -l "${{ github.event.inputs.service }}-*-next-dev" | sort -V | tail -5 >> $GITHUB_STEP_SUMMARY || echo "No development tags found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
