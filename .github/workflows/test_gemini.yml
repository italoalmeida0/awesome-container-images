name: Debug Release Notes Generator

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Service name"
        required: true
        default: "jupyterlab"
        type: string
      version:
        description: "Version number"
        required: true
        default: "4.6.7"
        type: string
      simulate_commits:
        description: "Simulate commits (true/false)"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  debug-release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for git log

      - name: Setup test data
        id: setup
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          VERSION="${{ github.event.inputs.version }}"

          echo "üì¶ Service: $SERVICE"
          echo "üè∑Ô∏è Version: $VERSION"

          # Simulate or get real commits
          if [[ "${{ github.event.inputs.simulate_commits }}" == "true" ]]; then
            echo "üé≠ Using simulated commits..."
            COMMITS="- feat: Add new authentication system by John Doe
          - fix: Resolve database connection timeout by Jane Smith
          - perf: Optimize query performance by Bob Johnson
          - docs: Update API documentation by Alice Brown
          - refactor: Clean up legacy code by Charlie Wilson"
            
            DIFF_SUMMARY="5 files changed, 125 insertions(+), 45 deletions(-)"
            FILES_CHANGED="5 files changed, 125 insertions(+), 45 deletions(-)"
          else
            echo "üìö Using real commits from repository..."
            # Get last 10 commits for the service directory (or whole repo if service doesn't exist)
            if [[ -d "$SERVICE" ]]; then
              COMMITS=$(git log HEAD~10..HEAD --pretty=format:"- %s by %an" -- ${SERVICE}/ | head -10)
            else
              echo "‚ö†Ô∏è Service directory '$SERVICE' not found, using root commits"
              COMMITS=$(git log HEAD~10..HEAD --pretty=format:"- %s by %an" | head -10)
            fi
            
            if [[ -z "$COMMITS" ]]; then
              echo "No commits found, using fallback"
              COMMITS="- Initial commit by GitHub Actions"
            fi
            
            # Get real diff stats
            if [[ -d "$SERVICE" ]]; then
              DIFF_SUMMARY=$(git diff HEAD~10..HEAD --shortstat -- ${SERVICE}/ || echo "No changes detected")
              FILES_CHANGED=$(git diff --stat HEAD~10..HEAD -- ${SERVICE}/ | tail -1 || echo "No files changed")
            else
              DIFF_SUMMARY=$(git diff HEAD~10..HEAD --shortstat || echo "No changes detected")
              FILES_CHANGED=$(git diff --stat HEAD~10..HEAD | tail -1 || echo "No files changed")
            fi
          fi

          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "diff_summary=$DIFF_SUMMARY" >> $GITHUB_OUTPUT
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT

      - name: Debug - Show collected data
        run: |
          echo "üîç Debug Information:"
          echo "===================="
          echo ""
          echo "üìä Diff Summary:"
          echo "${{ steps.setup.outputs.diff_summary }}"
          echo ""
          echo "üìÅ Files Changed:"
          echo "${{ steps.setup.outputs.files_changed }}"
          echo ""
          echo "üìù Commits:"
          echo "${{ steps.setup.outputs.commits }}"
          echo "===================="

      - name: Generate AI Release Notes
        id: ai_release
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          VERSION="${{ github.event.inputs.version }}"
          COMMITS="${{ steps.setup.outputs.commits }}"
          DIFF_SUMMARY="${{ steps.setup.outputs.diff_summary }}"
          FILES_CHANGED="${{ steps.setup.outputs.files_changed }}"

          # Create the prompt
          PROMPT="You are a release notes generator for Docker container services.
          Generate professional and exciting release notes for: ${SERVICE} v${VERSION}

          Changes summary: ${DIFF_SUMMARY}
          Files: ${FILES_CHANGED}

          Recent commits:
          ${COMMITS}

          Instructions:
          1. Create a catchy 1-2 sentence summary of what's new
          2. List key highlights organized by category using these emojis:
             - ‚ú® New Features
             - üêõ Bug Fixes  
             - ‚ö° Performance Improvements
             - üîß Maintenance
             - üìö Documentation
             - üö® Breaking Changes (if any)
          3. Keep it user-friendly, focus on benefits not technical details
          4. Be enthusiastic but professional
          5. Maximum 400 words
          6. Use markdown formatting
          7. Don't include installation instructions or technical details

          Make developers excited to use this new version!"

          # Escape the prompt for JSON
          PROMPT_JSON=$(echo "$PROMPT" | jq -Rs .)

          # Debug: Show prompt info
          echo "üìù Prompt length: $(echo "$PROMPT" | wc -c) characters"
          echo "üîß JSON-escaped prompt (first 300 chars):"
          echo "${PROMPT_JSON:0:300}..."

          echo "ü§ñ Calling Gemini 2.5 Flash API..."

          # Make the API call with detailed error handling
          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": ${PROMPT_JSON}
                }]
              }],
              \"generationConfig\": {
                \"temperature\": 0.8,
                \"maxOutputTokens\": 800,
                \"topP\": 0.95
              }
            }")

          # Extract HTTP status
          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS:/d')

          echo "üì° HTTP Status Code: $HTTP_STATUS"

          # Check HTTP status
          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "‚ùå API request failed with status code: $HTTP_STATUS"
            echo "üì• Response body:"
            echo "$RESPONSE_BODY" | jq . 2>/dev/null || echo "$RESPONSE_BODY"
            
            # Use fallback
            RELEASE_NOTES="## ${SERVICE} v${VERSION}

          This release includes various improvements and updates to the ${SERVICE} service.

          ### üìã Changes
          ${COMMITS}

          For detailed changes, please check the repository."
          else
            echo "‚úÖ API request successful!"
            
            # Debug: Show full response
            echo "üì• Full API Response:"
            echo "$RESPONSE_BODY" | jq . 2>/dev/null || echo "$RESPONSE_BODY"
            
            # Check for API errors
            ERROR=$(echo "$RESPONSE_BODY" | jq -r '.error.message // empty' 2>/dev/null)
            if [[ -n "$ERROR" ]]; then
              echo "‚ùå Gemini API Error: $ERROR"
              
              # Check specific error types
              if [[ "$ERROR" == *"API_KEY"* ]]; then
                echo "üîë Issue with API key - please check GEMINI_API_KEY secret"
              elif [[ "$ERROR" == *"quota"* ]]; then
                echo "üìä Quota exceeded - API limits reached"
              fi
              
              RELEASE_NOTES="Error: $ERROR"
            else
              # Extract the generated text
              RELEASE_NOTES=$(echo "$RESPONSE_BODY" | jq -r '.candidates[0].content.parts[0].text // empty' 2>/dev/null)
              
              if [[ -z "$RELEASE_NOTES" ]]; then
                echo "‚ö†Ô∏è No content generated, checking response structure..."
                echo "$RESPONSE_BODY" | jq '.candidates[0]' 2>/dev/null
                RELEASE_NOTES="Failed to extract release notes from response"
              else
                echo "‚úÖ Successfully extracted release notes!"
                
                # Show token usage
                PROMPT_TOKENS=$(echo "$RESPONSE_BODY" | jq -r '.usageMetadata.promptTokenCount // 0' 2>/dev/null)
                RESPONSE_TOKENS=$(echo "$RESPONSE_BODY" | jq -r '.usageMetadata.candidatesTokenCount // 0' 2>/dev/null)
                TOTAL_TOKENS=$(echo "$RESPONSE_BODY" | jq -r '.usageMetadata.totalTokenCount // 0' 2>/dev/null)
                
                echo "üìä Token Usage:"
                echo "  - Prompt: $PROMPT_TOKENS tokens"
                echo "  - Response: $RESPONSE_TOKENS tokens"
                echo "  - Total: $TOTAL_TOKENS tokens"
              fi
            fi
          fi

          # Save release notes
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Create the full release notes file
          cat << EOF > release_notes.md
          ${RELEASE_NOTES}

          ---

          ## üì¶ Docker Image

          Pull the latest version:
          \`\`\`bash
          docker pull ghcr.io/your-org/${SERVICE}:${VERSION}
          \`\`\`

          Or use the latest tag:
          \`\`\`bash
          docker pull ghcr.io/your-org/${SERVICE}:latest
          \`\`\`

          ## ‚úÖ Quality Assurance
          - Container health validated before release
          - Multi-platform support: \`linux/amd64\`, \`linux/arm64\`
          - Build cache optimized for faster deployments

          ## üìä Changelog
          [View Full Changelog](https://github.com/${{ github.repository }}/releases)

          ## üè∑Ô∏è Version Info
          - **Released:** v${VERSION}
          - **Service:** ${SERVICE}
          - **Registry:** ghcr.io/your-org
          EOF

          echo "‚ú® Release notes file created!"

      - name: Display Generated Release Notes
        if: always()
        run: |
          echo "üìÑ Generated Release Notes:"
          echo "============================"
          if [[ -f release_notes.md ]]; then
            cat release_notes.md
          else
            echo "‚ùå No release notes file generated"
            echo ""
            echo "Raw output:"
            echo "${{ steps.ai_release.outputs.release_notes }}"
          fi
          echo "============================"

      - name: Upload Release Notes
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          if-no-files-found: warn

      - name: Test with curl directly (for comparison)
        if: always()
        run: |
          echo "üß™ Testing with simple curl command for comparison..."

          SIMPLE_RESPONSE=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Write a simple test response in 10 words"
                }]
              }],
              "generationConfig": {
                "temperature": 0.5,
                "maxOutputTokens": 50
              }
            }')

          echo "Simple test response:"
          echo "$SIMPLE_RESPONSE" | jq '.candidates[0].content.parts[0].text' 2>/dev/null || echo "Failed to get simple response"
